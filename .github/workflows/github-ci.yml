name: BS UI tests

permissions:
  pull-requests: write
  issues: write
  repository-projects: write
  contents: write
  pages: write

on:
  workflow_dispatch:
    inputs:
      ALLURE_JOB_RUN_ID:
        description: "Inner parameter for Allure TestOps"
        required: false

env:
  IS_TESTOPS_RUN: "0"
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  ALLURE_ENDPOINT: ${{ secrets.ALLURE_ENDPOINT }}
  ALLURE_TOKEN: ${{ secrets.ALLURE_TOKEN }}
  ALLURE_PROJECT_ID: ${{ secrets.ALLURE_PROJECT_ID }}
  ALLURE_JOB_RUN_ID: ${{ github.event.inputs.ALLURE_JOB_RUN_ID }}
  ALLURE_LAUNCH_NAME: "BS UI - ${{ github.run_number }}"
  ALLURE_TESTPLAN_PATH: "./testplan.json"
  ALLURE_RESULTS: "build/allure-results"
  BROWSERSTACK_BUILD_NAME: "BS UI - ${{ github.run_number }}"
  DEVICE: "s10e"
  HUB: "browserstack"
  BS_USER: ${{ secrets.BS_USER }}
  BS_PASSWORD: ${{ secrets.BS_PASSWORD }}
  SUITE: "bs"
  APP: "bs://9b2a208fc390a0043e21be5618e3e63e3d13c281"

jobs:
  tests:
    runs-on: ubuntu-latest
    environment:
      name: link
      url: https://aero-consulting.github.io/java-api-test-framework/${{ github.run_number }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 18
        uses: actions/setup-java@v3
        with:
          java-version: '18'
          distribution: 'adopt'

      - uses: actions/github-script@v4
        id: allure-job-uid
        with:
          result-encoding: string
          script: |
            const result = await github.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            return `${context.repo.owner}/${context.repo.repo}/actions/workflows/${result.data.workflow_id}`
      - name: Download allurectl
        run: |
          wget https://github.com/allure-framework/allurectl/releases/latest/download/allurectl_linux_386 -O ./allurectl
          chmod +x ./allurectl
      - name: Prepare TestPlan
        run: ./allurectl job-run plan --output-file ${ALLURE_TESTPLAN_PATH}
      - name: List results 1
        run: ls
      - name: Get environments
        run: printenv
      - name: Get echo
        run: echo GRADLE_USER_HOME
      - name: Build with Gradle
        run: ./allurectl watch -- gradle clean test
        env:
          ALLURE_JOB_UID: ${{steps.allure-job-uid.outputs.result}}
      - name: Get environments
        run: printenv | grep ALLURE_
      - name: List results
        run: ls -la ${ALLURE_RESULTS}